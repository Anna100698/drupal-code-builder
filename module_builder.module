<?php
// $Id$

/**
 * @file
 * Builds scaffolding for custom modules.
 */

/* Type of hook information to extract from hook files */
define('HOOK_DESCRIPTIONS', 1);
define('HOOK_DECLARATIONS', 2);
define('HOOK_NAMES', 3);

/* Version of hook info to retrieve */
define('MODULE_BUILDER_VERSION', 'HEAD');

/**
 * @defgroup module_builder_core Core Drupal hooks
 */

/**
 * Implementation of hook_help().
 * 
 * @ingroup module_builder_core
 */
function module_builder_help($section) {
  switch ($section) {
    case 'admin/modules#description':
      return t('Builds scaffolding for custom modules.');
  }
}

/**
 * Implementation of hook_perm().
 * 
 * @ingroup module_builder_core
 */
function module_builder_perm() {
  return array('access module builder');
}

/**
 * Implementation of hook_menu().
 * 
 * @ingroup module_builder_core
 */
function module_builder_menu($may_cache) {
  $items = array();

  if ($may_cache) {
    $items[] = array(
      'path' => 'module_builder',
      'title' => t('module builder'),
      'callback' => 'module_builder_page',
      'access' => user_access('access module builder'),
    );
  }

  return $items;
}

/**
 * Implementation of hook_settings().
 * 
 * @ingroup module_builder_core
 */
function module_builder_settings() {
  $op = $_POST['op'];

  _module_builder_check_settings();

  $form['module_builder_hooks_directory'] = array(
    '#type' => 'textfield',
    '#title' => t('Path to hook documentation directory'),
    '#description' => t('Subdirectory in the directory "%dir" where local copies of hook documentation should be stored.', array('%dir' => '<em>'. variable_get('file_directory_path', 'files') .'/</em>')),
    '#default_value' => variable_get('module_builder_hooks_directory', 'hooks'),
  );

  if ($op == t('Update')) {
    module_builder_update_documentation();
  }

  $form['module_builder_update'] = array(
    '#type' => 'fieldset',
    '#title' => t('Update hook documentation'),
    '#description' => t('Your last hook documentation update was %date.', array('%date' => '<strong>'. variable_get('module_builder_last_update', 0) .'</strong>')),
  );
  $form['module_builder_update']['update'] = array(
    '#type' => 'button',
    '#value' => t('Update'),
  );

  return $form;
}

/**
 * Create a directory to store hook files if it does not exist.
 * 
 * This logic blatantly ripped off from image.module -- thanks James! :)
 */
function _module_builder_check_settings() {
  $hooks_path = file_create_path(variable_get('module_builder_hooks_directory', 'hooks'));
  file_check_directory($hooks_path, FILE_CREATE_DIRECTORY, 'module_builder_hooks_directory');
  $last_update = variable_get('module_builder_last_update', 0);
  if (!$last_update) {
    module_builder_update_documentation();
  }
}

/**
 * @defgroup module_builder_callback Functions which are the menu callbacks for this module
 */

/**
 * Displays module builder interface.
 * 
 * @ingroup module_builder_callback
 * @return
 *   Form for entering module options
 */
function module_builder_page() {

  _module_builder_check_settings();

  // Check for form submission
  $edit = isset($_POST['edit']) ? $_POST['edit'] : '';
  $op = isset($_POST['op']) ? $_POST['op'] : '';
  // TODO: This is not properly halting when errors are encountered :(
  if ($op == t('Submit') && !form_get_errors()) {
    return module_builder_process($edit);
  }

  // Start form
  $form['#action'] = url('module_builder');

  // Include CSS for formatting
  $path = drupal_get_path('module', 'module_builder');
  theme_add_style($path . '/module_builder.css');

  // Module properties
  $form['module_root_name'] = array(
    '#type' => 'textfield',
    '#title' => t('Module root name'),
    '#description' => t('All of your functions will be prefixed with this string. This name must only contain letters, numbers, and underscores, and may not start with a number.'),
    '#required' => TRUE,
  );
  $form['module_short_description'] = array(
    '#type' => 'textfield',
    '#title' => t('Module short description'),
    '#description' => t('Will appear in the module listing at <a href="%listing">administer >> modules</a>.', array('%listing' => url('admin/modules'))),
    '#required' => TRUE,
  );
  $form['module_readable_name'] = array(
    '#type' => 'textfield',
    '#title' => t('Module readable name'),
    '#description' => t('Name of your module as it will appear to users. (Note: only for node modules)'),
  );
  $form['module_help_text'] = array(
    '#type' => 'textarea',
    '#title' => t('Help text'),
    '#description' => t('Help text (HTML) to appear in <a href="%help">administer >> help >> module_name</a> page', array('%help' => url('admin/help'))),
  );

  // Get list of hooks
  $hook_groups = module_builder_get_hook_data();
  
  if (!is_array($hook_groups) || !count($hook_groups)) {
    form_set_error('hooks', t('No hooks were found. Please check the documentation path specified in the <a href="%settings">admininster >> settings >> modulebuilder</a> page.', array('%settings' => url('admin/settings/module_builder'))));
  }
  else {

    // Build hooks list
    $form['hooks'] = array(
      '#type' => 'checkboxes',
      '#title' => t('Use the following hooks'),
    );

    foreach ($hook_groups as $hook_group => $hooks) {
      $form['hooks'][$hook_group] = array(
        '#type' => 'fieldset',
        '#title' => $hook_group . ' hooks',
        '#collapsible' => TRUE,
        '#collapsed' => FALSE,
        '#theme' => 'module_builder_hook_list',
      );
      foreach ($hooks as $hook) {
        $name = $hook['name'];
        $desc = $hook['description'];
        $form['hooks'][$hook_group][$name] = array(
          '#type' => 'checkbox',
          '#title' => $name,
          '#description' => $desc,

          // TODO: For some reason this gives me some wacky error under PHP 5:
          // Fatal error: Cannot use string offset as an array
          //'#default_value' => $edit['hooks'][$hook_group][$hook],

          // TODO: I would *like* to do something like the following, so some of the long
          // descriptions don't totally mangle the page output, but need a way to do like
          // a "onmouseover" effect to display the full thing. Note that 'title' is not
          // a valid attribute for divs. :\ 
          //'#description' => truncate_utf8($desc, 40, TRUE, TRUE),

        );
        // Set some default hooks
        if ($name == 'hook_help' || $name == 'hook_menu') {
          $form['hooks'][$hook_group][$name]['#default_value'] = 1;
        }
      }
    }

    $form['op'] = array(
      '#type' => 'submit',
      '#value' => t('Submit'),
    );
  }

  return drupal_get_form('module_builder', $form);
}

/**
 * Theme function for hook list
 */
function theme_module_builder_hook_list($form) {
  $output = "<ul class=\"hook-group\">\n";
  foreach (element_children($form) as $key) {
    $output .= "  <li>". form_render($form[$key]) ."</li>\n";
  }
  $output .= "</ul>\n";
  return $output;
}

/**
 * Implementation of hook_form_validate().
 */
function module_builder_validate($form_id, $form_values) {
  // Check module_root_name for special characters
  // Took this regex from the PHP manual page on Functions
  if (!preg_match('#[a-zA-Z_\x7f-\xff][a-zA-Z0-9_\x7f-\xff]*#', $form_values['module_root_name'])) {
    form_set_error('module_root_name', t('The module root name must only contain letters, numbers, and underscores, and may not start with a number.'));
  }
}

/**
 * Proceses form once submitted.
 */
function module_builder_process($edit) {

  // Include link in breadcrumb to go back to main module builder form
  $breadcrumb = drupal_get_breadcrumb();
  $breadcrumb[] = l(t('module builder'), 'module_builder');
  drupal_set_breadcrumb($breadcrumb);

  $path = drupal_get_path('module', 'module_builder');

  // Check for custom header file, else use the default
  if (file_exists("$path/header-custom.template")) {
    $header_file = file_get_contents("$path/header-custom.template");
  }
  else {
    $header_file = file_get_contents("$path/header.template");
  }

  // Check for custom functions file, else use default
  if (file_exists("$path/hook-custom.template")) {
    $hook_file = file_get_contents("$path/hook-custom.template");
  }
  else {
    $hook_file = file_get_contents("$path/hook.template");
  }

  // Get array of default hook declarations
  $hook_default_declarations = module_builder_get_hook_data(HOOK_DECLARATIONS);

  // Get array of custom hook declarations
  $hook_custom_declarations = array();
  preg_match_all('#== START (.*?) ==(.*?)== END .*? ==#ms', $hook_file, $matches);
  $count = count($matches[0]);
  for ($i = 0; $i < $count; $i++) {
    $key = $matches[1][$i];
    $value = trim($matches[2][$i]);
    $hook_custom_declarations[$key] = $value;
  }

  // Begin module output
  $output = $header_file;

  // Determine which hooks are to be implemented
  $implemented_hooks = array();
  foreach ($edit['hooks'] as $hooks) {
    foreach ($hooks as $hook => $value) {
      if ($value) {
        // Display PHP doc
        $output .= "
/**
 * Implementation of $hook().
 */
";

        // See if function bodies exist; if so, use function bodies from template
        if (array_key_exists($hook, $hook_custom_declarations)) {
          $output .= $hook_custom_declarations[$hook] ."\n\n";
        }
        else {
          // Otherwise, just use a generic one
          $output .= str_replace('hook', $edit['module_root_name'], $hook_default_declarations[$hook] ."\n\n}\n\n");
        }
      }
    }
  }

  // Replace variables
  $variables = array(
    '%module' => $edit['module_root_name'],
    '%description' => str_replace("'", "\'", $edit['module_short_description']),
    '%help' => isset($edit['module_help_text']) ? str_replace("'", "\'", $edit['module_help_text']) : t('TODO: Create admin help text.'),
    '%readable' => str_replace("'", "\'", $edit['module_readable_name']),
  );
  $output = strtr($output, $variables);

  // Replace full-blown Id tag with just starter
  // (excuse the weird concatenation stuff; CVS hijacks it otherwise :))
  $output = preg_replace('#\/\/ \$Id(.*?)\$#', '// $'. 'Id$', $output);

  // Prepare final output
  $output = $header . check_plain($output) . $footer;

  return theme('module_builder_results', $edit['module_root_name'], $output);
}


/**
 * Theme function for displaying module_builder results.
 *
 * @param $name
 *   The name of the module
 * @param $code
 *   The generated source code
 * @return string
 *   HTML output to display form
 */
function theme_module_builder_results($name, $code) {
  $output  = "<div id=\"module-message\">\n";
  $output .= t('Please copy and paste the following text into a file called <strong>%module.module</strong>.', array('%module' => $name)) . "\n";
  $output .= "</div>\n";
  $output .= "<div id=\"module-code\">\n";
  $output .= "  <textarea cols=\"70\" rows=\"40\">\n";
  $output .= $code;
  $output .= "  </textarea>\n";
  $output .= "</div>\n";

  return $output;
}

/**
 * Retrieves hook data of given type
 *
 * @return
 *   Array of hook info
 */
function module_builder_get_hook_data($type = HOOK_NAMES) {
  // Find path of hook documentation directory
  $path = file_create_path(variable_get('module_builder_hooks_directory', 'hooks')) .'/';

  // Get list of hook documentation files
  $files = module_builder_get_doc_files($path);
  if (!isset($files)) {
    return NULL;
  }

  // Build list of hooks
  $hook_groups = array();
  foreach ($files as $file) {
    $hook_data = module_builder_extract_hook_data($path, $file, $type);
    if ($type == HOOK_NAMES) {
      // Obtain list of descriptions
      $descriptions = module_builder_extract_hook_data($path, $file, HOOK_DESCRIPTIONS);
      $file_name = substr($file, 0, strrpos($file, '.'));
      // Create an array in the form of:
      // array(
      //   'filename' => array(
      //     array('hook' => 'hook_foo', 'description' => 'hook_foo description'),
      //     ...
      //   ),
      //   ...
      // );
      foreach ($hook_data as $key => $hook) {
        // Remove extra "* " for multi-line descriptions
        $description = str_replace('* ', '', $descriptions[$key]);
        $hook_groups[$file_name][$key] = array('name' => $hook, 'description' => $description);
      }
    }
    elseif ($type == HOOK_DECLARATIONS)  {
      $hook_names = module_builder_extract_hook_data($path, $file, HOOK_NAMES);
      // Create an array in the form of:
      // array(
      //   'hook_foo' => 'function hook_foo( ... ) {',
      //     ...
      // );
      foreach ($hook_data as $key => $declaration) {
        $hook_groups[$hook_names[$key]] = $declaration;
      }
    }
  }

  return $hook_groups;
}

/**
 * Retrieve list of documentation files containing hook definitions.
 *
 * @param string $path
 *   Path to the hooks documentation directory
 * @return array
 *   Array of files
 */
function module_builder_get_doc_files($path) {
  if (!$path) {
    drupal_set_message(t('Please configure the hook documentation path in <a href="%settings">module builder settings</a>.', array('%settings' => url('admin/settings/module_builder'))), 'error');
    return NULL;
  }

  $files = array();

  if (is_dir($path)) {
    if ($dh = opendir($path)) {
      while (($file = readdir($dh)) !== false) {
        // Ignore files that don't make sense to include
        if ($file != '.' && $file != '..' && $file != 'CVS' && $file != 'install.php') {
          $files[] = $file;
        }
      }
      closedir($dh);
    }
    else {
      drupal_set_message(t('There was an error opening the hook documentation path. Please try again.'), 'error');
      return NULL;
    }
  }
  else {
    drupal_set_message(t('Hook documentation path is invalid. Please return to the <a href="%settings">module builder settings</a> page to try again.', array('%settings' => url('admin/settings/module_builder'))), 'error');
    return NULL;
  }

  return $files;
}

/**
 * Extracts hook information based on type parameter.
 *
 * @param string $path
 *   Path to hook file
 * @param string $file
 *   Name of hook file
 * @param string $type
 *   Type of hook data to extract. This is one of three values:
 *   * 1 - HOOK_DESCRIPTIONS: Each hook's user-friendly description
 *   * 2 - HOOK_DECLARATIONS: Each hook's entire function declaration
 *   * 3 - HOOK_NAMES: The names of each hook
 * @return array
 *   Array of hook data
 */
function module_builder_extract_hook_data($path, $file, $type = HOOK_NAMES) {
  $contents = file_get_contents($path . $file);

  // This match contains three sub-patterns, each corresponding to a constant which
  // describes which data to extract
  preg_match_all('#\/\*\*\n \* (\w.*?)\s+\*\s+\*.*?(function (hook_.*?)\(.*?\) {)#ms', $contents, $matches);

  return $matches[$type];
}

/**
 * Initiates documentation upate routine.
 */
function module_builder_update_documentation() {
  // Retrieve remote hook file listing from cvs.drupal.org
  $hook_listing = drupal_http_request('http://cvs.drupal.org/viewcvs/drupal/contributions/docs/developer/hooks/?only_with_tag='. MODULE_BUILDER_VERSION);
  if ($hook_listing->error) {
    return FALSE;
  }

  $url_pattern = '!<td>\&nbsp;<a href="(.*?)"!';
  $file_pattern = '!(.*)/(.*?)\?!';
  $hook_files = array();

  // Parse out list of URLs
  preg_match_all($url_pattern, $hook_listing->data, $url_matches);
  foreach ($url_matches[1] as $url_match) {

    // Parse out file name
    preg_match($file_pattern, $url_match, $file_matches);

    // Store value of URL to hook documentation file and its name
    $hook_file_url = 'http://cvs.drupal.org'. $url_match;
    $hook_file_name = $file_matches[2];
    $hook_files[$hook_file_name] = $hook_file_url;
  }

  // Retrieve each file and store it in the hooks directory, overwriting what's currently there
  $directory = file_create_path(variable_get('module_builder_hooks_directory', 'hooks'));
  foreach ($hook_files as $file_name => $file_url) {
    $file_contents = drupal_http_request($file_url);
    file_save_data($file_contents->data, "$directory/$file_name", FILE_EXISTS_REPLACE);
  }

  // Finally, set the last updated variable
  variable_set('module_builder_last_update', format_date(time()));
}
