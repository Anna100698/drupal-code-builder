<?php
// $Id$

/**
 * @file
 * Builds scaffolding for custom modules.
 */

/** Type of hook information to extract from hook files */
define('HOOK_FUNCTION_BODY', 1);
define('HOOK_DEFINITION', 2);
define('HOOK_NAME', 3);

/**
 * @defgroup module_builder_core Core Drupal hooks
 */

/**
 * Implementation of hook_help().
 * 
 * @ingroup module_builder_core
 */
function module_builder_help($section) {
  switch ($section) {
    case 'admin/modules#description':
      return t('Builds scaffolding for custom modules.');
  }
}

/**
 * Implementation of hook_perm().
 * 
 * @ingroup module_builder_core
 */
function module_builder_perm() {
  return array('access module builder');
}

/**
 * Implementation of hook_menu().
 * 
 * @ingroup module_builder_core
 */
function module_builder_menu($may_cache) {
  $items = array();

  if ($may_cache) {
    $items[] = array(
      'path' => 'module_builder',
      'title' => t('module builder'),
      'callback' => 'module_builder_page',
      'access' => user_access('access module builder'),
    );
  }

  return $items;
}

/**
 * Implementation of hook_settings().
 * 
 * @ingroup module_builder_core
 */
function module_builder_settings() {
  $form['module_builder_hooks_path'] = array(
    '#type' => 'textfield',
    '#title' => t('Path to hook documentation directory'),
    '#description' => t('Absolute path to the docs/developer/hooks directory of a local checkout of the contributions repository.'),
    '#default_value' => variable_get('module_builder_hooks_path', NULL),
  );

  return $form;
}

/**
 * @defgroup module_builder_callback Functions which are the menu callbacks for this module
 */

/**
 * Displays module builder interface.
 * 
 * @ingroup module_builder_callback
 * @return
 *   Form for entering module options
 */
function module_builder_page() {

  // Check for form submission
  $edit = isset($_POST['edit']) ? $_POST['edit'] : '';
  $op = isset($_POST['op']) ? $_POST['op'] : '';
  // TODO: This is not properly halting when errors are encountered :(
  if ($op == t('Submit') && !form_get_errors()) {
    return module_builder_process($edit);
  }

  // Start form
  $form['#action'] = url('module_builder');

  // Module properties
  $form['module_root_name'] = array(
    '#type' => 'textfield',
    '#title' => t('Module root name'),
    '#description' => t('All of your functions will be prefixed with this string. This name must only contain letters, numbers, and underscores, and may not start with a number.'),
    '#required' => TRUE,
  );
  $form['module_short_description'] = array(
    '#type' => 'textfield',
    '#title' => t('Module short description'),
    '#description' => t('Will appear in the module listing at <a href="%listing">administer >> modules</a>.', array('%listing' => url('admin/modules'))),
    '#required' => TRUE,
  );
  $form['module_readable_name'] = array(
    '#type' => 'textfield',
    '#title' => t('Module readable name'),
    '#description' => t('Name of your module as it will appear to users. (Note: only for node modules)'),
  );
  $form['module_help_text'] = array(
    '#type' => 'textarea',
    '#title' => t('Help text'),
    '#description' => t('Help text (HTML) to appear in <a href="%help">administer >> help >> module_name</a> page', array('%help' => url('admin/help'))),
  );

  // Get list of hooks
  $hook_groups = module_builder_get_hooks(variable_get('module_builder_hooks_path', NULL));

  if (!is_array($hook_groups) || !count($hook_groups)) {
    form_set_error('hooks', t('No hooks were found. Please check the documentation path specified in the <a href="%settings">admininster >> settings >> modulebuilder</a> page.', array('%settings' => url('admin/settings/module_builder'))));
  }
  else {

    // Build hooks list
    $form['hooks'] = array(
      '#type' => 'checkboxes',
      '#title' => t('Use the following hooks'),
    );

    foreach ($hook_groups as $hook_group => $hooks) {
      $form['hooks'][$hook_group] = array(
        '#type' => 'fieldset',
        '#title' => $hook_group . ' hooks',
      );
      foreach ($hooks as $hook) {
        $form['hooks'][$hook_group][$hook] = array(
          '#type' => 'checkbox',
          '#title' => $hook,
          // TODO: For some reason this gives me some wacky error under PHP 5:
          // Fatal error: Cannot use string offset as an array
          //'#default_value' => $edit['hooks'][$hook_group][$hook],
        );
        // Set some default hooks
        if ($hook == 'hook_help' || $hook == 'hook_menu') {
          $form['hooks'][$hook_group][$hook]['#default_value'] = 1;
        }
      }
    }

    $form['op'] = array(
      '#type' => 'submit',
      '#value' => t('Submit'),
    );
  }

  return drupal_get_form('module_builder', $form);
}

/**
 * Implementation of hook_form_validate().
 */
function module_builder_validate($form_id, $form_values) {
  // Check module_root_name for special characters
  // Took this regex from the PHP manual page on Functions
  if (!preg_match('#[a-zA-Z_\x7f-\xff][a-zA-Z0-9_\x7f-\xff]*#', $form_values['module_root_name'])) {
    form_set_error('module_root_name', t('The module root name must only contain letters, numbers, and underscores, and may not start with a number.'));
  }
}

/**
 * Proceses form once submitted.
 */
function module_builder_process($edit) {
  $path = drupal_get_path('module', 'module_builder');

  // Check for custom header file, else use the default
  if (file_exists("$path/header-custom.template")) {
    $header_file = file_get_contents("$path/header-custom.template");
  }
  else {
    $header_file = file_get_contents("$path/header.template");
  }

  // Check for custom functions file, else use default
  if (file_exists("$path/hook-custom.template")) {
    $hook_file = file_get_contents("$path/hook-custom.template");
  }
  else {
    $hook_file = file_get_contents("$path/hook.template");
  }

  // Get array of default hook definitions
  $hook_default_definitions = module_builder_get_hooks(variable_get('module_builder_hooks_path', NULL), HOOK_DEFINITION);

  // Get array of custom hook definitions
  $hook_custom_definitions = array();
  preg_match_all('#== START (.*?) ==(.*?)== END .*? ==#ms', $hook_file, $matches);
  $count = count($matches[0]);
  for ($i = 0; $i < $count; $i++) {
    $key = $matches[1][$i];
    $value = trim($matches[2][$i]);
    $hook_custom_definitions[$key] = $value;
  }

  // Begin module output
  $header = t('Please copy and paste the following text into a file called <strong>%module.module</strong>.', array('%module' => $edit['module_root_name']));
  $header .= '<div class="codebox" style="height: 25em; overflow: auto;"><pre>';
  $output = $header_file;
  $footer = '</pre></div>';
  
  // Determine which hooks are to be implemented
  $implemented_hooks = array();
  foreach ($edit['hooks'] as $hooks) {
    foreach ($hooks as $hook => $value) {
      if ($value) {
        // Display PHP doc
        $output .= "
/**
 * Implementation of $hook().
 */
";

        // See if function bodies exist; if so, use function bodies from template
        if (array_key_exists($hook, $hook_custom_definitions)) {
          $output .= $hook_custom_definitions[$hook] ."\n\n";
        }
        else {
          // Otherwise, just use a generic one
          $output .= str_replace('hook', $edit['module_root_name'], $hook_default_definitions[$hook] ."\n\n}\n\n");
        }
      }
    }
  }

  // Replace variables
  $variables = array(
    '%module' => $edit['module_root_name'],
    '%description' => str_replace("'", "\'", $edit['module_short_description']),
    '%help' => isset($edit['module_help_text']) ? str_replace("'", "\'", $edit['module_help_text']) : t('TODO: Create admin help text.'),
    '%readable' => str_replace("'", "\'", $edit['module_readable_name']),
  );
  $output = strtr($output, $variables);

  // Replace full-blown $Id$ tag with just starter
  $output = preg_replace('#\/\/ \$Id(.*?)\$#', '// $Id$', $output);

  return $header . check_plain($output) . $footer;
}

/**
 * Get list of hooks
 *
 * @return unknown
 */
function module_builder_get_hooks($path, $type = HOOK_NAME) {

  // Add the trailing slash if we need it
  $path = rtrim($path, '/') .'/';

  // Get list of files
  $files = module_builder_get_doc_files($path);
  if (!isset($files)) {
    return NULL;
  }

  // Build list of hooks
  $hook_groups = array();
  foreach ($files as $file) {
    $hooks = _module_builder_extract_hook_data($path, $file, $type);
    $file_name = substr($file, 0, strrpos($file, '.'));
    if ($type == HOOK_NAME) {
      sort($hooks);
      foreach ($hooks as $hook) {
        $hook_groups[$file_name][] = $hook;
      }
    }
    else {
      foreach ($hooks as $hook => $value) {
        $hook_groups[$hook] = $value;
      }
    }
  }

  return $hook_groups;
}

/**
 * Retrieve list of documentation files containing hook definitions.
 *
 * @param string $path
 *   Path to the hooks documentation directory
 * @return array
 *   Array of files
 */
function module_builder_get_doc_files($path) {
  if (!$path) {
    drupal_set_message(t('Please configure the hook documentation path in <a href="%settings">module builder settings</a>.', array('%settings' => url('admin/settings/module_builder'))), 'error');
    return NULL;
  }

  $files = array();

  if (is_dir($path)) {
    if ($dh = opendir($path)) {
      while (($file = readdir($dh)) !== false) {
        // Ignore files that don't make sense to include
        if ($file != '.' && $file != '..' && $file != 'CVS' && $file != 'install.php') {
          $files[] = $file;
        }
      }
      closedir($dh);
    }
    else {
      drupal_set_message(t('There was an error opening the hook documentation path. Please try again.'), 'error');
      return NULL;
    }
  }
  else {
    drupal_set_message(t('Hook documentation path is invalid. Please return to the <a href="%settings">module builder settings</a> page to try again.', array('%settings' => url('admin/settings/module_builder'))), 'error');
    return NULL;
  }

  return $files;
}

/**
 * Retrieve array of hook declarations from a given file.
 *
 * @param $file
 *   Name of file from which to extract hook data.
 * @return array
 *   Array of hook data
 */
function _module_builder_extract_hook_data($path, $file, $type = HOOK_NAME) {
  $contents = file_get_contents($path . $file);

  // TODO: This regex needs tweaking; right now it will not get the final hook in the file. :(
  preg_match_all('#((function (hook_.*?)\(.*?\) {).*?})\s+\/\*\*#ms', $contents, $matches);

  // Return array of matches; either just the hook names themselves...
  if ($type == HOOK_NAME) {
    return $matches[$type];
  }
  else {
    // ...Or an array of hook definitions/hook bodies, keyed by hook name
    $matches_array = array();
    $count = count($matches[0]);
    for ($i = 0; $i < $count; $i++) {
      $key = $matches[HOOK_NAME][$i];
      if ($type == HOOK_DEFINITION) {
        $value = $matches[HOOK_DEFINITION][$i];
      }
      else {
        $value = $matches[HOOK_FUNCTION_BODY][$i];
      }
      $matches_array[$key] = trim($value);
    }
    return $matches_array;
  }
}