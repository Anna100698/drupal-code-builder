<?php

namespace DrupalCodeBuilder\Test\Integration\Collection;

use Drupal\KernelTests\KernelTestBase;

/**
 * Tests services collection.
 */
class CollectServicesInfoTest extends KernelTestBase {

  /**
   * The modules to enable.
   *
   * @var array
   */
  public static $modules = [
    // Don't enable any modules, as we replace the module extension list during
    // the test and remove all modules except for our fixture module.
  ];

  /**
   * {@inheritdoc}
   */
  protected function setUp() {
    // Drupal doesn't know about DCB, so won't have it in its autoloader, so
    // rely on the Factory file's autoloader.
    $dcb_root = dirname(dirname(dirname(__DIR__)));
    require_once("$dcb_root/Factory.php");

    \DrupalCodeBuilder\Factory::setEnvironmentLocalClass('DrupalLibrary')
      ->setCoreVersionNumber(\Drupal::VERSION);

    $this->environment = \DrupalCodeBuilder\Factory::getEnvironment();

    $this->servicesCollector = new \DrupalCodeBuilder\Task\Collect\ServicesCollector(
      \DrupalCodeBuilder\Factory::getEnvironment(),
      new \DrupalCodeBuilder\Task\Collect\ContainerBuilderGetter,
      new \DrupalCodeBuilder\Task\Collect\CodeAnalyser($this->environment)
    );

    parent::setUp();
  }

  /**
   * Tests collection of core services.
   */
  public function testCoreServicesCollection() {
    $module_installer = $this->container->get('module_installer');
    $result = $module_installer->install(['node']);
    $this->assertTrue($result);

    $complete_service_info = $this->servicesCollector->collect();

    $this->assertNotEmpty($complete_service_info['all']['entity_type.bundle.info']);
    $entity_type_bundle_info = $complete_service_info['all']['entity_type.bundle.info'];
    $this->assertEquals('\Drupal\Core\Entity\EntityTypeBundleInfo', $entity_type_bundle_info['class']);
    $this->assertEquals('\Drupal\Core\Entity\EntityTypeBundleInfoInterface', $entity_type_bundle_info['interface']);
    $this->assertEquals('Entity type bundle info', $entity_type_bundle_info['label']);
    // TODO: why does this get uppercase 'Entity'??
    $this->assertEquals('The Entity type bundle info service', $entity_type_bundle_info['description']);

    // A 'manager' doesn't get called 'service'.
    $this->assertNotEmpty($complete_service_info['all']['entity_type.manager']);
    $entity_type_manager_info = $complete_service_info['all']['entity_type.manager'];
    $this->assertEquals('\Drupal\Core\Entity\EntityTypeManager', $entity_type_manager_info['class']);
    $this->assertEquals('\Drupal\Core\Entity\EntityTypeManagerInterface', $entity_type_manager_info['interface']);
    $this->assertEquals('Entity type manager', $entity_type_manager_info['label']);
    $this->assertEquals('The entity type manager', $entity_type_manager_info['description']);
  }

  /**
   * Tests collecting services with special requirements.
   *
   * This uses a fixture Drupal module which was generated by DCB.
   *
   * TODO: add this to the stuff that DCB can generate automatically so it can
   * be updated at the same time as test sample data.
   */
  public function testSpecialCasesServicesCollection() {
    $this->installFixtureModule('test_services');

    $complete_service_info = $this->servicesCollector->collect();
    $this->assertNotEmpty($complete_service_info['all']['test_services.combobulating_service']);

    // A service whose name has a 'service' prefix doesn't get it repeated in
    // the description.
    $test_service_info = $complete_service_info['all']['test_services.combobulating_service'];
    $this->assertEquals('\Drupal\test_services\CombobulatingService', $test_service_info['class']);
    $this->assertEquals('Combobulating service', $test_service_info['label']);
    $this->assertEquals('The Combobulating service', $test_service_info['description']);
  }

  protected function installFixtureModule(string $module) {
    // Create a module list service, using our subclass that lets us hack in
    // the discovery.
    $module_list = new TestModuleExtensionList(
      $this->container->get('app.root'),
      'module',
      $this->container->get('cache.default'),
      $this->container->get('info_parser'),
      $this->container->get('module_handler'),
      $this->container->get('state'),
      $this->container->get('config.factory'),
      $this->container->get('extension.list.profile'),
      $this->container->getParameter('install_profile'),
      $this->container->getParameter('container.modules')
    );

    // Mock the discovery to return only our fixture module.
    $extension_discovery = $this->prophesize(\Drupal\Core\Extension\ExtensionDiscovery::class);

    // The location of the fixture module relative to Drupal depends on the
    // test environment, unfortunately.
    if (getenv('TESTTYPE')) {
      // Travis version -- detect the environment variable that's set in
      // travis.yml. The DCB package is not in the vendor folder for these, but
      // outside of Drupal completely.
      $extension_scan_result[$module] = new \Drupal\Core\Extension\Extension(
        \Drupal::root(),
        $module,
        "../drupal-code-builder/drupal-code-builder/TEST/Fixtures/modules/$module/$module.info.yml"
      );
    }
    else {
      // Local version. We expect DCB to be in the vendor folder.
      $extension_scan_result[$module] = new \Drupal\Core\Extension\Extension(
        // Our module is outside of the Drupal root, but we have to specify it
        // as ModuleInstaller::install() assumes it when it constructs the
        // Extension object again later.
        \Drupal::root(),
        $module,
        // This has to be a path relative to the given root in the first
        // parameter.
        "../vendor/drupal-code-builder/drupal-code-builder/Test/Fixtures/modules/$module/$module.info.yml"
      );
    }
    $extension_discovery->scan('module')->willReturn($extension_scan_result);

    // Set the discovery on the module list and set it into the container.
    $module_list->setExtensionDiscovery($extension_discovery->reveal());
    $module_list->reset();
    $this->container->set('extension.list.module', $module_list);

    // Install our module.
    $module_installer = $this->container->get('module_installer');
    $result = $module_installer->install([$module]);
    $this->assertTrue($result);
  }

}

/**
 * Module List which allows the discovery to be set.
 */
class TestModuleExtensionList extends \Drupal\Core\Extension\ModuleExtensionList {

  /**
   * @var \Drupal\Core\Extension\ExtensionDiscovery|null
   */
  protected $extensionDiscovery;

  /**
   * @param \Drupal\Core\Extension\ExtensionDiscovery $extension_discovery
   */
  public function setExtensionDiscovery(\Drupal\Core\Extension\ExtensionDiscovery $extension_discovery) {
    $this->extensionDiscovery = $extension_discovery;
  }

  /**
   * {@inheritdoc}
   */
  protected function getExtensionDiscovery() {
    return $this->extensionDiscovery ?: parent::getExtensionDiscovery();
  }

}
